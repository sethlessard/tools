{
  "Class": {
    "prefix": "tclass",
    "description": "JavaScript Class",
    "body": [
      "class $1 {",
      "",
      "\tconstructor($2) {",
      "",
      "\t}",
      "}",
      "",
      "module.exports = $1;",
      ""
    ]
  },
  "ES6 Class": {
    "prefix": "tes6class",
    "description": "ES6 JavaScript Class",
    "body": [
      "class $1 {",
      "",
      "\tconstructor($2) {",
      "",
      "\t}",
      "}",
      "",
      "export default $1;",
      ""
    ]
  },
  "Express Router": {
    "prefix": "texpressrouter",
    "description": "Express Router",
    "body": [
      "const { Router } = require(\"express\");",
      "const router = Router();",
      "",
      "/**",
      " * Handle GET /",
      " */",
      "router.get('/', (req, res) => {",
      "\tres.send(\"Not implemented\");",
      "});",
      "",
      "/**",
      " * Handle POST /",
      " **/",
      "router.post('/', (req, res) => {",
      "\tres.send(\"Not implemented\");",
      "});",
      "",
      "/**",
      " * Handle PUT /",
      " */",
      "router.put('/', (req, res) => {",
      "\tres.send(\"Not implemented\");",
      "});",
      "",
      "/**",
      " * Handle DELETE /",
      " */",
      "router.delete('/', (req, res) => {",
      "\tres.send(\"Not implemented\");",
      "});",
      "",
      "module.exports = router;",
      ""
    ]
  },
  "Express Router ES6": {
    "prefix": "tes6expressrouter",
    "description": "Express Router (ES6)",
    "body": [
      "import { Router } from \"express\";",
      "const router = Router();",
      "",
      "/**",
      " * Handle GET /",
      " */",
      "router.get('/', (req, res) => {",
      "\tres.send(\"Not implemented\");",
      "});",
      "",
      "/**",
      " * Handle POST /",
      " **/",
      "router.post('/', (req, res) => {",
      "\tres.send(\"Not implemented\");",
      "});",
      "",
      "/**",
      " * Handle PUT /",
      " */",
      "router.put('/', (req, res) => {",
      "\tres.send(\"Not implemented\");",
      "});",
      "",
      "/**",
      " * Handle DELETE /",
      " */",
      "router.delete('/', (req, res) => {",
      "\tres.send(\"Not implemented\");",
      "});",
      "",
      "export default router;",
      ""
    ]
  },
  "Mocha & Chai Unit Test": {
    "prefix": "tmochachaiunit",
    "description": "Mocha & Chai Unit Test",
    "body": [
      "const { assert } = require(\"chai\");",
      "",
      "describe(\"$1\", () => {",
      "",
      "\tit(\"${2:Synchronus test}\", () => {",
      "",
      "\t});",
      "",
      "\tit(\"${3:Async test}\", (done) => {",
      "\t\tdone();",
      "\t});",
      "});",
      ""
    ]
  },
  "React Class Component": {
    "prefix": "cc",
    "description": "React Class Component",
    "body": [
      "import React, { Component } from \"react\";",
      "import PropTypes from \"prop-types\";",
      "import styled from \"styled-components\";",
      "",
      "const Wrapper = styled.div``;",
      "",
      "class $1 extends Component {",
      "",
      "\t/**",
      "\t * $1 constructor.",
      "\t * @param {object} props the props.",
      "\t */",
      "\tconstructor(props) {",
      "\t\t\tsuper(props);",
      "\t\t\tthis.state = {",
      "",
      "\t\t\t};",
      "\t}",
      "\t",
      "\t/**",
      "\t * Render the $1 component.",
      "\t */",
      "\trender() {",
      "\t\tconst { children, style: compStyle } = this.props;",
      "\t\tconst style = {",
      "\t\t\t$2: {",
      "",
      "\t\t\t}",
      "\t\t};",
      "\t\tObject.assign(style.$2, compStyle);",
      "\t\treturn (",
      "\t\t\t<Wrapper style={style.$2}>{children}</Wrapper>",
      "\t\t);",
      "\t}",
      "}",
      "",
      "$1.propTypes = {",
      "\tchildren: PropTypes.node",
      "};",
      "",
      "export default $1;",
      ""
    ]
  },
  "React Stateless-Functional Component": {
    "prefix": "sfc",
    "description": "React Stateless-Functional Component",
    "body": [
      "import React from \"react\";",
      "import PropTypes from \"prop-types\";",
      "import styled from \"styled-components\";",
      "",
      "const Wrapper = styled.div``;",
      "",
      "/**",
      " * Render the $1 component.",
      " */",
      "const $1 = ({ children, style: compStyle }) => {",
      "\tconst style = {",
      "\t\t$2: {",
      "",
      "\t\t}",
      "\t};",
      "\tObject.assign(style.$2, compStyle);",
      "\treturn (",
      "\t\t<Wrapper style={style.$2}>{children}</Wrapper>",
      "\t);",
      "};",
      "",
      "$1.propTypes = {",
      "\tchildren: PropTypes.node",
      "};",
      "",
      "export default $1;",
      ""
    ]
  },
  "React-Redux Connected Class Component": {
    "prefix": "ccc",
    "description": "React-Redux Class Component",
    "body": [
      "import React, { Component } from \"react\";",
      "import PropTypes from \"prop-types\";",
      "import styled from \"styled-components\";",
      "import { connect } from \"react-redux\";",
      "",
      "const Wrapper = styled.div``;",
      "",
      "/**",
      " * Map the redux state to the $1 component's props.",
      " * @param {object} state the redux state.",
      " * @param {object} ownProps the props passed to the $1 component.",
      " * @returns {object} the mapped props.",
      " */",
      "const mapStateToProps = (state, ownProps) => ({",
      "",
      "});",
      "",
      "/**",
      " * Map the dispatch events as props for the $1 component.",
      " */",
      "const mapDispatchToProps = (dispatch) => ({",
      "",
      "});",
      "",
      "class $1 extends Component {",
      "",
      "\t/**",
      "\t * $1 constructor.",
      "\t * @param {object} props the props.",
      "\t */",
      "\tconstructor(props) {",
      "\t\t\tsuper(props);",
      "\t\t\tthis.state = {",
      "",
      "\t\t\t};",
      "\t}",
      "\t",
      "\t/**",
      "\t * Render the $1 component.",
      "\t */",
      "\trender() {",
      "\t\tconst { children, style: compStyle } = this.props;",
      "\t\tconst style = {",
      "\t\t\t$2: {",
      "",
      "\t\t\t}",
      "\t\t};",
      "\t\tObject.assign(style.$2, compStyle);",
      "\t\treturn (",
      "\t\t\t<Wrapper style={style.$2}>{children}</Wrapper>",
      "\t\t);",
      "\t}",
      "}",
      "",
      "$1.propTypes = {",
      "\tchildren: PropTypes.node",
      "};",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)($1);",
      ""
    ]
  },
  "React-Redux Connected Stateless-Functional Component": {
    "prefix": "csfc",
    "description": "React-Redux Connected Stateless-Functional Component",
    "body": [
      "import React from \"react\";",
      "import PropTypes from \"prop-types\";",
      "import styled from \"styled-components\";",
      "import { connect } from \"react-redux\";",
      "",
      "const Wrapper = styled.div``;",
      "",
      "/**",
      " * Map the redux state to the $1 component's props.",
      " * @param {object} state the redux state.",
      " * @param {object} ownProps the props passed to the $1 component.",
      " * @returns {object} the mapped props.",
      " */",
      "const mapStateToProps = (state, ownProps) => ({",
      "",
      "});",
      "",
      "/**",
      " * Map the dispatch events as props for the $1 component.",
      " */",
      "const mapDispatchToProps = (dispatch) => ({",
      "",
      "});",
      "",
      "/**",
      " * Render the $1 component.",
      " */",
      "const $1 = ({ children, style: compStyle }) => {",
      "\tconst style = {",
      "\t\t$2: {",
      "",
      "\t\t}",
      "\t};",
      "\tObject.assign(style.$2, compStyle);",
      "\treturn (",
      "\t\t<Wrapper style={style.$2}>{children}</Wrapper>",
      "\t);",
      "};",
      "",
      "$1.propTypes = {",
      "\tchildren: PropTypes.node",
      "};",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)($1);",
      ""
    ]
  },
  "Singleton": {
    "prefix": "tsingleton",
    "description": "JavaScript Singleton",
    "body": [
      "let _instance = null;",
      "",
      "/**",
      " * Get the $1 instance.",
      " * @returns {$1} the $1 instance.",
      " */",
      "const get$1Instance = () => {",
      "\tif (_instance === null) {",
      "\t\t_instance = new $1();",
      "\t}",
      "\treturn _instance;",
      "};",
      "",
      "class $1 {",
      "",
      "\tconstructor() {",
      "",
      "\t}",
      "}",
      "",
      "module.exports = $1;"
    ]
  },
  "Singleton ES6": {
    "prefix": "tes6singleton",
    "description": "JavaScript Singleton ES6",
    "body": [
      "let _instance = null;",
      "",
      "/**",
      " * Get the $1 instance.",
      " * @returns {$1} the $1 instance.",
      " */",
      "const get$1Instance = () => {",
      "\tif (_instance === null) {",
      "\t\t_instance = new $1();",
      "\t}",
      "\treturn _instance;",
      "};",
      "",
      "class $1 {",
      "",
      "\tconstructor() {",
      "",
      "\t}",
      "}",
      "",
      "export default $1;",
      "export { get$1Instance };"
    ]
  }
}