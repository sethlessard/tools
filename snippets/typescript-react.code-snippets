{
  "React Class Component": {
    "prefix": "cc",
    "description": "React Class Component",
    "body": [
      "import React, { Component, CSSProperties, ReactNode } from \"react\";",
      "import styled from \"styled-components\";",
      "",
      "export interface $1Props {",
      "\tchildren?: ReactNode[];",
      "\tstyle?: CSSProperties;",
      "}",
      "",
      "interface $1State {",
      "",
      "}",
      "",
      "const Wrapper = styled.div``;",
      "",
      "class $1 extends Component<$1Props, $1State> {",
      "",
      "\t/**",
      "\t * $1 constructor.",
      "\t * @param props the props.",
      "\t */",
      "\tconstructor(props: $1Props) {",
      "\t\t\tsuper(props);",
      "\t\t\tthis.state = {",
      "",
      "\t\t\t};",
      "\t}",
      "\t",
      "\t/**",
      "\t * Render the $1 component.",
      "\t */",
      "\trender() {",
      "\t\tconst { children, style: compStyle } = this.props;",
      "\t\tconst style: { [component: string]: CSSProperties } = {",
      "\t\t\t$2: {",
      "",
      "\t\t\t}",
      "\t\t};",
      "\t\tObject.assign(style.$2, compStyle);",
      "\t\treturn (",
      "\t\t\t<Wrapper style={style.$2}>{children}</Wrapper>",
      "\t\t);",
      "\t}",
      "}",
      "",
      "export default $1;",
      ""
    ]
  },
  "React Stateless-Functional Component": {
    "prefix": "sfc",
    "description": "React Stateless-Functional Component",
    "body": [
      "import React, { CSSProperties, ReactNode } from \"react\";",
      "import styled from \"styled-components\";",
      "",
      "export interface $1Props {",
      "\tchildren?: ReactNode[];",
      "\tstyle?: CSSProperties;",
      "}",
      "",
      "const Wrapper = styled.div``;",
      "",
      "/**",
      " * Render the $1 component.",
      " */",
      "const $1 = ({ children, style: compStyle }: $1Props) => {",
      "\tconst style: { [component: string]: CSSProperties } = {",
      "\t\t$2: {",
      "",
      "\t\t}",
      "\t};",
      "\tObject.assign(style.$2, compStyle);",
      "\treturn (",
      "\t\t<Wrapper style={style.$2}>{children}</Wrapper>",
      "\t);",
      "};",
      "",
      "export default $1;",
      ""
    ]
  },
  "React-Redux Connected Class Component": {
    "prefix": "ccc",
    "description": "React-Redux Class Component",
    "body": [
      "import React, { Component, CSSProperties, ReactNode } from \"react\";",
      "import styled from \"styled-components\";",
      "import { connect } from \"react-redux\";",
      "",
      "export interface $1Props {",
      "\tchildren?: ReactNode[];",
      "\tstyle?: CSSProperties;",
      "}",
      "",
      "interface $1State {",
      "",
      "}",
      "",
      "const Wrapper = styled.div``;",
      "",
      "/**",
      " * Map the redux state to the $1 component's props.",
      " * @param state the redux state.",
      " * @param ownProps the props passed to the $1 component.",
      " * @returns the mapped props.",
      " */",
      "const mapStateToProps = (state: { }, ownProps: $1Props) => ({",
      "",
      "});",
      "",
      "/**",
      " * Map the dispatch events as props for the $1 component.",
      " */",
      "const mapDispatchToProps = (dispatch: (v: any) => void) => ({",
      "",
      "});",
      "",
      "interface Connected$1Props extends $1Props {",
      "",
      "}",
      "",
      "class $1 extends Component<$1Props, $1State> {",
      "",
      "\t/**",
      "\t * $1 constructor.",
      "\t * @param props the props.",
      "\t */",
      "\tconstructor(props: $1Props) {",
      "\t\t\tsuper(props);",
      "\t\t\tthis.state = {",
      "",
      "\t\t\t};",
      "\t}",
      "\t",
      "\t/**",
      "\t * Render the $1 component.",
      "\t */",
      "\trender() {",
      "\t\tconst { children, style: compStyle } = this.props as Connected$1Props;",
      "\t\tconst style: { [component: string]: CSSProperties } = {",
      "\t\t\t$2: {",
      "",
      "\t\t\t}",
      "\t\t};",
      "\t\tObject.assign(style.$2, compStyle);",
      "\t\treturn (",
      "\t\t\t<Wrapper style={style.$2}>{children}</Wrapper>",
      "\t\t);",
      "\t}",
      "}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)($1);",
      ""
    ]
  },
  "React-Redux Connected Stateless-Functional Component": {
    "prefix": "csfc",
    "description": "React-Redux Connected Stateless-Functional Component",
    "body": [
      "import React, { CSSProperties, ReactNode } from \"react\";",
      "import styled from \"styled-components\";",
      "import { connect } from \"react-redux\";",
      "",
      "export interface $1Props {",
      "\tchildren?: ReactNode[];",
      "\tstyle?: CSSProperties;",
      "}",
      "",
      "interface $1State {",
      "",
      "}",
      "",
      "const Wrapper = styled.div``;",
      "",
      "/**",
      " * Map the redux state to the $1 component's props.",
      " * @param state the redux state.",
      " * @param ownProps the props passed to the $1 component.",
      " * @returns the mapped props.",
      " */",
      "const mapStateToProps = (state: { }, ownProps: $1Props) => ({",
      "",
      "});",
      "",
      "/**",
      " * Map the dispatch events as props for the $1 component.",
      " */",
      "const mapDispatchToProps = (dispatch: (v: any) => void) => ({",
      "",
      "});",
      "",
      "interface Connected$1Props extends $1Props {",
      "",
      "}",
      "",
      "/**",
      " * Render the $1 component.",
      " */",
      "const $1 = (props: $1Props) => {",
      "\tconst style: { [component: string]: CSSProperties } = {",
      "\t\t$2: {",
      "",
      "\t\t}",
      "\t};",
      "\tObject.assign(style.$2, props.style);",
      "\treturn (",
      "\t\t<Wrapper style={style.$2}>{props.children}</Wrapper>",
      "\t);",
      "};",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)($1);",
      ""
    ]
  }
}